CREATE DATABASE WINDOW ;
--WINDOW FUNCTIONS : ANALYTIC FUNCTION 
-- WINDOW FUNCTIONS ARE USED TO CREATE A WINDOW OF THE RECORDS 

CREATE TABLE EMPLOYEES(
EMP_ID INT PRIMARY KEY ,
EMP_NAME VARCHAR(50) ,
DEPT_NAME VARCHAR(50) ,
SALARY INTEGER ) ;

INSERT INTO EMPLOYEES VALUES(101,'MOHAN','ADMIN',4000) ;
INSERT INTO EMPLOYEES VALUES(102,'RAJKUMAR','HR',3000) ;
INSERT INTO EMPLOYEES VALUES(103,'AKBAR','IT',4000) ;
INSERT INTO EMPLOYEES VALUES(104,'DORVIS','FINANCE',6500) ;
INSERT INTO EMPLOYEES VALUES(105,'ROHIT','HR',3000) ;
INSERT INTO EMPLOYEES VALUES(106,'RAJESH','FINANCE',5000) ;
INSERT INTO EMPLOYEES VALUES(107,'PREET','HR',7000) ;
INSERT INTO EMPLOYEES VALUES(108,'MARYAM','ADMIN',4000) ;
INSERT INTO EMPLOYEES VALUES(109,'SANJAY','IT',6500) ;
INSERT INTO EMPLOYEES VALUES(110,'VASUDHA','IT',7000) ;
INSERT INTO EMPLOYEES VALUES(111,'MALINDA','IT',8000) ;
INSERT INTO EMPLOYEES VALUES(112,'KOMAL','IT',10000) ;
INSERT INTO EMPLOYEES VALUES(113,'GAUTAM','ADMIN',2000) ;
INSERT INTO EMPLOYEES VALUES(114,'MANISH','HR',3000) ;
INSERT INTO EMPLOYEES VALUES(115,'CHANDNI','IT',4500) ;
INSERT INTO EMPLOYEES VALUES(116,'SATYA','FINANCE',6500) ;
INSERT INTO EMPLOYEES VALUES(117,'AADARSH','HR',3500) ;
INSERT INTO EMPLOYEES VALUES(118,'TEJASWI','FINANCE',5500) ;
INSERT INTO EMPLOYEES VALUES(119,'CORY','HR',8000) ;
INSERT INTO EMPLOYEES VALUES(120,'MONICA','ADMIN',5000) ;
INSERT INTO EMPLOYEES VALUES(121,'ROSALIN','IT',6000) ;
INSERT INTO EMPLOYEES VALUES(122,'IBRAHIM','IT',8000) ;
INSERT INTO EMPLOYEES VALUES(123,'VIKRAM','IT',8000) ;
INSERT INTO EMPLOYEES VALUES(124,'DHEERAJ','IT',11000) ;

SELECT * FROM EMPLOYEES ;


--1. AGGREGATE WINDOW FUNCTION

--MAX SALARY EARNED BY AN EMPLOYEE 
SELECT MAX(SALARY) AS MAX_SAL FROM EMPLOYEES ;

--FINDOUT MAX SALARY WITHIN EACH DEPARTMENT 
SELECT DEPT_NAME , MAX(SALARY) FROM EMPLOYEES GROUP BY DEPT_NAME ;

--FINDOUT MAX SALARY WITHIN EACH DEPARTMENT ALONGSIDE THE OTHER DETAILS OF THE EMPLOYEES 

SELECT E.* ,
MAX(SALARY) OVER(PARTITION BY DEPT_NAME) AS MAX_SAL
FROM EMPLOYEES E ;  --OVER CLAUSE IS USED TO CREATE A WINDOW 

SELECT E.* ,
MAX(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS MAX_SAL
FROM EMPLOYEES E ; --FOR ORDERING BY EMP_ID

--FINDOUT MIN SALARY WITHIN EACH DEPARTMENT ALONGSIDE THE OTHER DETAILS OF THE EMPLOYEES 
SELECT E.* ,
MIN(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS MIN_SAL
FROM EMPLOYEES E ;

--FINDOUT SUM OF SALARY WITHIN EACH DEPARTMENT ALONGSIDE THE OTHER DETAILS OF THE EMPLOYEES 
SELECT E.* ,
SUM(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS TOTAL
FROM EMPLOYEES E ;

--FINDOUT COUNT OF EMPLOYEES WITHIN EACH DEPARTMENT ALONGSIDE THE OTHER DETAILS OF THE EMPLOYEES 
SELECT E.* ,
COUNT(EMP_ID) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID ) AS NO_OF_EMPLOYEES
FROM EMPLOYEES E ;

--FINDOUT AVERAGE SALARY WITHIN EACH DEPARTMENT ALONGSIDE THE OTHER DETAILS OF THE EMPLOYEES 
SELECT E.* ,
AVG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS AVG_SAL
FROM EMPLOYEES E ;



-- 2. RANKING WINDOW FUNCTIONS 
--  WINDOW FUNCTION : ROW_NUMBER() 
--IT IS USED TO ASSIGN A UNIQUE VALUE TO EACH RECORD WITHIN A TABLE 
SELECT E.* ,
ROW_NUMBER() OVER() AS RN
FROM EMPLOYEES E ;


-- UNIQUE VALUE BY DEPARTMENT NAME
SELECT E.* ,
ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN
FROM EMPLOYEES E ;

--SELECT THE PREVIOUS TOPMOST 2 EMPLOYEES (THE PREVIOUS EMPLOYEE'S EMP_ID IS LOWER THAN THE NEW ONE ) 
SELECT * FROM
     (SELECT E.* ,
      ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN
      FROM EMPLOYEES E ) X
WHERE X.RN < 3 ;

--  WINDOW FUNCTION : RANK() 
-- WHENEVER RANK FINDS A DUPLICATE VALUE , IT'S ASSIGN THE SAME VALUE TO THE RECOD BUT FOR EVERY DUPLICATE RECORD IT SKIPS ONE VALUE IN DESCENDING ORDER .

--FETCH EMPLOYEES IN EACH DEPARTMENT ORDER BY SALARY DESC
SELECT E.* ,
RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RNK
FROM EMPLOYEES E ;

--FETCH TOP 3 EMPLOYEES IN EACH DEPARTMENT EARNING THE MAX SALARY
SELECT * FROM 
       (SELECT E.* ,
        RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RNK
        FROM EMPLOYEES E ) X
WHERE X.RNK < 4 ;

--  WINDOW FUNCTION : DENSE_RANK() 
-- WHENEVER DENSE_RANK FINDS A DUPLICATE VALUE , IT'S ASSIGN THE SAME VALUE TO THE RECOD AND FOR EVERY DUPLICATE RECORD IT DOES NOT SKIP VALUE AS LIKE RANK .

--FETCH EMPLOYEES IN EACH DEPARTMENT ORDER BY SALARY DESC
SELECT E.* ,
RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RNK,
DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RNK
FROM EMPLOYEES E ;

--FETCH TOP 3 EMPLOYEES IN EACH DEPARTMENT EARNING THE MAX SALARY
SELECT * FROM 
       (SELECT E.* ,
        RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RNK,
        DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RNK
        FROM EMPLOYEES E ) X
WHERE X.RNK < 4 ;

-- ROW_NUMBER(),RANK(),DENSE_RANK() DOES NOT TAKE A PARAMETER , IT JUST ASSIGNS A VALUE BASED ON WHAT IS GIVEN IN THE OVER CLAUSE
SELECT E.* ,
RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RNK,
DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RNK,
ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RN
FROM EMPLOYEES E ;


-- 3. VALUE(OFFSET) WINDOW  FUNCTIONS
--  WINDOW FUNCTION : LAG() 

--USED TO FIND THE PREVIOUS COLUMN VALUE BASED ON EXPRESSION , OFFSET AND DEFAULT VALUE 
SELECT E.* ,
LAG(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PRE_EMP_SAL
FROM EMPLOYEES E ;

SELECT E.* ,
LAG(SALARY,2,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PRE_EMP_SAL
FROM EMPLOYEES E ;

--FETCH THE QUERY TO DISPLAY IF THE SALARY OF AN EMPLOYEE IS HIGHER , LOWER OR EQUAL TO THE PREVIOU EMPLOYEE
SELECT E.* ,
LAG(SALARY,1) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PRE_EMP_SAL,
CASE WHEN LAG(SALARY,1) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) IS NULL THEN 'NO RECORD '
     WHEN E.SALARY > LAG(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID)  THEN 'HIGHER THAN THE PREVIOUS EMPLOYEE'
     WHEN E.SALARY < LAG(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID)  THEN 'LOWER THAN THE PREVIOUS EMPLOYEE'
     WHEN E.SALARY = LAG(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID)  THEN 'EQUALTHE PREVIOUS EMPLOYEE'
END SAL_STATUS
FROM EMPLOYEES E ;


--  WINDOW FUNCTION : LEAD() 

--USED TO FIND THE FOLLOWING COLUMN VALUE BASED ON EXPRESSION , OFFSET AND DEFAULT VALUE 
SELECT E.* ,
LEAD(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SAL
FROM EMPLOYEES E ;

SELECT E.* ,
LEAD(SALARY,2,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SAL
FROM EMPLOYEES E ;


SELECT E.* ,
LAG(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PRE_EMP_SAL,
LEAD(SALARY,1,0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SAL
FROM EMPLOYEES E ;
